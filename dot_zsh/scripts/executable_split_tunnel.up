#!/bin/bash

# set text colors
reset_color=$(tput sgr0)
red=$(tput setaf 1)
green=$(tput setaf 2)

error() {
  local msg="$1"
  echo -e "${red} -- error -- ${reset_color}$msg" 1>&2
  exit 1
}
info() {
  local msg="$1"
  echo -e "${green} -- info -- ${reset_color}$msg"
}

# Check if script is run as root
if [ "$(id -u)" != "0" ]; then
  error "This script must be run as root"
fi

# Set default interface or use command-line argument
PRIVATE_NETWORK="172.27.0"
GATEWAY="172.27.0.129"
INTERFACE="$(ifconfig | grep -B 3 $PRIVATE_NETWORK | awk -F':' '/(^[a-z]+[0-9]+)(\:)/ { print $1 }')" &>/dev/null 2>&1
# Google ip ranges
JSON_PATH="/Users/swimmingpolar/.zsh/data/goog.json"

if [ "$INTERFACE" == "" ]; then
  error "No network interface found for $PRIVATE_NETWORK"
fi

# Function to add a route
add_route() {
  local network=$1
  if ! route add -net "$network" "$GATEWAY" -ifp "$INTERFACE" 1>/dev/null 2>&1; then
    error "Failed to add route for $network"
  fi
  info "Added to routing table - $network"
}

# Function to reset the interface
reset_interface() {
  info "Resetting interface $INTERFACE..."
  sudo ifconfig "$INTERFACE" down 1>/dev/null 2>&1
  sudo ifconfig "$INTERFACE" up 1>/dev/null 2>&1
  info "Interface $INTERFACE has been reset."
}

info "Setting up split tunnel on interface $INTERFACE..."

ip_ranges="$(jq -r '.prefixes[] | .ipv4Prefix | select(. != null)' "$JSON_PATH")" 2>/dev/null
old_IFS=$IFS
IFS=$'\n' read -r -d '' -a ip_ranges <<<"$ip_ranges"
for network in "${ip_ranges[@]}"; do
  add_route "$network"
done
IFS=$old_IFS

# Trap for cleaning up on error
trap 'echo "An error occurred. Resetting interface..."; reset_interface; exit 1' ERR

info "Split tunnel setup complete. All Google IP ranges are now routed through the $INTERFACE interface."
info "To reset this configuration, run: sudo ip route flush dev $INTERFACE"
