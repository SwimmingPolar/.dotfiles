#! /bin/bash

# Get top level repository path
get_top_level() {
    git rev-parse --show-toplevel 2>/dev/null
}
get_project_root() {
    git rev-parse --show-toplevel 2>/dev/null
}
cd_to_project_root() {
    # List to hold paths of repos
    list=()
    # Save starting path
    cur_dir="$(pwd)"

    while [[ "$cur_dir" != "/" && "$(pwd)" != "/" ]]; do
        # Get top level dir
        top_dir="$(get_top_level)"
        # Check if top_dir is not null and not root directory
        if [[ -n "$top_dir" && "$top_dir" != "/" ]]; then
            # Save top level dir
            list+=("$top_dir")
            # CD top level dir -> parent dir
            cd "$top_dir/.." || return
        fi
    done

    # CD to original path
    cd "$cur_dir" || return

    # If list has only one path
    if [ ${#list[@]} -eq 1 ]; then
        cd "${list[0]}" || return
    else
        # Show list of possible top level paths
        # with indentation in respect to nested structure (indentation=2spaces)
        # Nearest top level path has the highest priority (1. nearest top level path 2... 3...)
        echo "Multiple project roots found:"
        for i in "${!list[@]}"; do
            printf "%s. %s\n" "$((i + 1))" "${list[$i]}"
        done

        # Wait for user input(1-n: [user input])
        read -rp "Choose a project root (1-${#list[@]}): " choice

        # Go to that path
        cd "${list[$((choice - 1))]}" || return
    fi

    # Show the previous and current directory with colorization
    new_dir="$(pwd)"
    echo -e "previous: \e[90m$cur_dir\e[0m\n current: \e[32m$new_dir\e[0m"

    # Exit with 0
    return 0
}
print_project_root() {
    project_root="$(get_project_root)"
    if [[ -n $project_root ]]; then
        echo -e "project_root: \e[32m$project_root\e[0m"
    else
        echo "no project root: $(pwd)"
    fi
}
# cd to project root function
# alias cdr='cd "$(git rev-parse --show-toplevel)" 2>/dev/null || return -1'
